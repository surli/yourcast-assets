package fr.unice.yourcast.personalizer

import fr.unice.yourcast.sources.ProviderInfo
import net.sf.json.*

/**
* Controller representing the entry point to the application. 
* This class has to be generated according to the selected sources in the configurator
* @author Daniel Romero
*/
class MainController {

    
    /*---ATRIBUTES---*/
    /**
     * The service to access the database
     **/
    def personalizerService
    
    /**
     * The service to access the databese of cities
     **/
    //def cityService
    
    /*---METHODS---*/
    
    /**
     * Display the home of the application which is one of the page list related to sources.
     * To be generated according to the selected sources
     *
     **/
    def index() { 
        
        def init=null
        if(!personalizerService.getIsInitialized())
        {
            personalizerService.drop()
            init= personalizerService.initFromFile()
            
            if(init==null)
                personalizerService.setInitialized(true)
        }
        
        redirect(controller: "$controllerName", action: "list")
    
    }
    
    /**
     * Initialize the databese with the renderers and calls
     **/
    def init(){
        
        personalizerService.drop()
        //personalizerService.init()
        personalizerService.initFromFile()
        personalizerService.setInitialized(true)
        redirect(controller: "$controllerName", action: "list")
    }
    
    /*def initValues() {
        personalizerService.initServiceCalls()
        redirect(controller: "$controllerName", action: "list")
    }
    
    def initAll() {
        personalizerService.initServiceInfos()
        personalizerService.initServiceCalls()
        cityService.init()
        redirect(controller: "$controllerName", action: "list")
    }*/
        
    /**
    * Initiliaze the cities
    **/
    /*def initCities()
    {
        cityService.init()
        redirect(controller: "$controllerName", action: "list")
    }*/
    
    /**
    * Retrieve the parameters related to an specific service/source in json
    **/
    def getParamService()
    {
        def retour = null;
        
        /*if(params.provname!=null)
        {
            log.debug "Provname : "+params.provname+" | Servname : "+params.servname
            retour = personalizerService.getParamService(params.provname,params.servname)
        }
        else
        {*/
        log.debug "Servname : "+params.servname 
        retour = personalizerService.getParamService(params.servname)
        //}
        JSONObject result = new JSONObject()
        if (retour != null)
            result.putAll(retour);
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
    def getCalls()
    {
        def retour = null;
        
        //if(params.provname!=null)
        //{
        log.debug "Provname : "+params.provname+" | Servname : "+params.servname
        retour = personalizerService.getParamService(params.provname,params.servname)
        /*}
        else
        {
            log.debug "Servname : "+params.servname 
            retour = personalizerService.getParamService(params.servname)
        }*/
        JSONObject result = new JSONObject()
        if (retour != null)
            result.putAll(retour);
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
    
    def updateProviderFlags()
    {
        log.debug "Updating flags"
        log.debug "Provname : "+params.provname+" | Servname : "+params.servname+ "| value : "+params.value
        
        def updated=personalizerService.updateProviderFlag(params.provname, params.servname, Boolean.valueOf(params.value))
        
        log.debug "flags updated"
        JSONObject result = new JSONObject()
        result.putAt("updated",updated)
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
    def getProviderFlags()
    {
        def flag=personalizerService.getProviderFlags(params.provname, params.servname)
        
        JSONObject result = new JSONObject()
        if (flag != null)
            result.putAt("value",flag)
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
   def getServiceRateLimit()
    {
        def rl=personalizerService.getServiceRateLimit(params.servname)
        
        
        JSONObject result = new JSONObject()
        
        if(rl)
        {
        	result.putAt("minutes",rl.minutes)
        	result.putAt("requests", rl.requests)
        }
        else
        {
        	result.putAt("error","The service "+params.servname+" does not exist")
        }	
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
    
    def getServiceCallCount()
    {
    	def callCount=personalizerService.getCallCount(params.provname, params.servname)
    	
    	JSONObject result = new JSONObject()
    	
    	if(callCount)
    	{
    		result.putAt("value",callCount.callExecuted)
    	
    	}
    	else
        {
        	result.putAt("error","The service "+params.servname+" does not have a call count related to "+params.provname+" provider")
        }
          
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
    
    def updateServiceCallCount()
    {
    	def updated=personalizerService.updateCallCount(params.provname, params.servname, Integer.valueOf(params.value))
        
        log.debug "call count updated"
        JSONObject result = new JSONObject()
        result.putAt("updated",updated)
        render(text:result,contentType:"application/json",encoding:"UTF-8")
    }
    
}
