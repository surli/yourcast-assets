/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package fr.unice.yourcast.provider.model.personalization

import groovyx.net.http.RESTClient
import net.sf.json.*
import fr.unice.i3s.modalis.yourcast.provider.groovy.*
import org.apache.commons.beanutils.BeanMap
import net.sf.ehcache.Cache
import net.sf.ehcache.Element
import fr.unice.yourcast.provider.util.CacheManagerYourCast
import java.util.HashMap

/**
 *
 * @author urli, Daniel Romero
 */
class Personalizer {
    
    private static final String URL = "$personalizer"

    private static final String PATH_PARAMS = "params/"

    private static final String PATH_CALLS = "calls/"
    
    
    private static final String PATH__FLAGS_UPDATE = "flags/update/"
    
    private static final String PATH__FLAGS = "flags/"

    private RESTClient client

    //Singleton
    private static Personalizer personalizer= null


    //Cache of the personalizer
    private static Cache cacheParams= CacheManagerYourCast.getCacheManager().createCache("personalizerGdrGplParams")

    //private static Cache cacheCalls= CacheManagerYourCast.getCacheManager().createCache("personalizerGdrGplCalls")

    public Personalizer() 
    {
        this.client = new RESTClient(URL)            
    }


    Map getParamService(name) 
    {
        //Verifies on the cache if the information is already available before trying to get it
        def result= null



        if(this.cacheParams.get(name))
        {
            log.debug "Using cache params in Personalizer!"
            result= this.cacheParams.get(name).getObjectValue()  
        }
        else
        {
            log.debug "Personalizer- Calling the personalizer service for retrieving params!"
            Map params = ['path':PATH_PARAMS+name]
            
            try{
            
                def response = this.client.get(params)
                log.debug "Personalizer- The response data "+response.getData()
                if(response.getData()!=null && !response.getData().equals(JSONNull.getInstance()))
                {
                    result= new Hashtable(response.getData())
                    
                    log.debug "Personalizer- Params map "+result

                    this.cacheParams.put(new Element(name, result))

                }
                //else
                //    result= [:]
            }
            catch(Exception e)
            {
                log.error "Personalizer- The personalizer service is not available. It is not possible to retrieve the parameters of the "+ name+" service"
            }

        }


        return result

    }

    Map getCalls(providerName, name) 
    {
        def result= null

        /*if(this.cacheCalls.get(providerName+"/"+name))
        {

            System.out.println("Using cache calls in Personalizer!")
            result= this.cacheCalls.get(providerName+"/"+name).getObjectValue()  

        }*/
        //else
        //{
        log.debug "Calling the personalizer service for retrieving calls!"
        Map params = ['path':PATH_CALLS+providerName+"/"+name]
        def response = this.client.get(params)
        log.debug "The response call data "+response.getData()
        if (response.getData()!=null && !response.getData().equals(JSONNull.getInstance()))
        {
            result= new Hashtable(response.getData())
            //this.cacheCalls.put(new Element(providerName+"/"+name, result))
        }

        else
            result= [:]
        //}


        return result
    }
        
        
    def hasProviderChanged(provider, source)
    {
        def result= false


        log.debug "Calling the personalizer service for retrieving the flag value!"
        Map params = ['path':PATH__FLAGS+provider+"/"+source]
        def response = this.client.get(params)
        log.debug "The flag value "+response.getData()
        if (response.getData()!=null && !response.getData().equals(JSONNull.getInstance()))
        {
            result= response.getData().get("value")
        }


        return result
    }

    synchronized def updateProviderFlag(provider, source, value)
    {
        log.debug "Calling the personalizer service for updating the flag value!"
        Map params = ['path':PATH__FLAGS_UPDATE+provider+"/"+source+"/"+value]
        def response = this.client.post(params)
        log.debug "The response call data update "+response.getData()
        /*if (response.getData()!=null && !response.getData().equals(JSONNull.getInstance()))
        {
            result= response.getData()
        }*/ 
    }
        
    static void cleanCache()
    {
        //this.cacheCalls.removeAll()
        this.cacheParams.removeAll()
    }
}

